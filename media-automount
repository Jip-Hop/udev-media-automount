#!/usr/bin/env bash

# This script is called from our systemd unit file to mount or unmount
# a USB drive.

# Default options to use for mounting
AUTOMOUNT_OPTS='noatime'
# Default type to use for mounting
AUTOMOUNT_TYPE=''

# Runs after mounting
POST_MOUNT='/etc/post_mount/run.sh'

# Directory to look for type-specific settings
CONFDIR=/etc/media-automount.d

# Directory to use as parent media dir for mountpoints
MEDIADIR=/media

ACTION="$1"
DEVBASE="$2"
DEVICE="/dev/${DEVBASE}"

shopt -s nullglob

usage()
{
    echo "Usage (needs root permission): $0 {add|remove} device_name (e.g. sdb1)"
    exit 1
}

[[ $# -ne 2 ]] && {
    usage
}

[[ $EUID != 0 ]] && {
    usage
}

log() {
    echo "$*"
}

do_unmount()
{
    # Check if $DEVICE is still mounted
    if grep /etc/mtab -qe "^$DEVICE"
    then
        log "Removed device $DEVICE, umounting..."
        if umount "$DEVICE"
        then
            exitcode=0
        else
            exitcode=$?
            log "Error umounting $DEVICE errcode: $exitcode"
        fi
    else
        # prevent it from failing on nonexistent devices and degrading systemctl boot
        exitcode=0
        log "Device doesn't exist anymore or is not a block device: $DEVICE"
    fi

    # Delete all empty dirs in $MEDIADIR that aren't being used as mount
    # points. This is kind of overkill, but if the drive was unmounted
    # prior to removal we no longer know its mount point, and we don't
    # want to leave it orphaned...
    for f in $MEDIADIR/* ; do
        if [[ -n $(find "$f" -maxdepth 0 -type d -empty) ]]; then
            if ! grep -q " $f " /etc/mtab; then
                log "Removing mount point $f"
                rmdir "$f"
            fi
        fi
    done
    exit $exitcode
}

do_mount()
{
    # Load additional info for the block device
    eval $(blkid -po export $DEVICE)

    # Devices with unknown type will be ignored
    if [ -z "$TYPE" ]
    then
        log "$DEVICE has no known filesystem type, ignoring mount request"
        exit 0
    fi

    # Don't attempt to mount zfs
    if [ "$TYPE" == "zfs_member" ]
    then
        log "Device $DEVICE filesystem type is $TYPE, ignoring mount request"
        exit 0
    fi

    # Don't manage devices labelled EFI
    if [ "$LABEL" == "EFI" ]
    then
        log "Device $DEVICE has label $LABEL, automount won't manage it"
        exit 0
    fi

    # Check /etc/fstab for an entry corresponding to the device
    [ "$UUID" ] && fstab=$(grep /etc/fstab -e "^[^#]*${UUID/\-/\\\-}") || \
    [ "$LABEL" ] && fstab=$(grep /etc/fstab -e "^[^#]*${LABEL/\-/\\\-}") || \
    fstab=$(grep /etc/fstab -e "^[ \t]*$DEVICE[ \t]")

    # Don't manage devices that are already in fstab
    if [ "$fstab" ]
    then
        log "Device $DEVICE already in /etc/fstab, automount won't manage it: ${fstab/[ \t][ \t]/ }"
        exit 0
    fi

    # Directory name
    AUTOMOUNT_DIR="${MEDIADIR}/${LABEL:-${DEVICE##*/}}"

    # Make unique mount point
    if grep -q " ${AUTOMOUNT_DIR} " /etc/mtab; then
        # Already in use, make a unique one
        AUTOMOUNT_DIR+="-${DEVBASE}"
    fi

    # Load Filesystem-specific configuration for mounting
    if [ -e "$CONFDIR/$TYPE" ]
    then
        source "$CONFDIR/$TYPE"
    fi

    log "Mounting device $DEVICE in $AUTOMOUNT_DIR"
    mkdir -p "$AUTOMOUNT_DIR"
    
    # Don't include -t flag if AUTOMOUNT_TYPE is empty (same for -o and AUTOMOUNT_OPTS)
    if mount ${AUTOMOUNT_TYPE:+-t $AUTOMOUNT_TYPE} ${AUTOMOUNT_OPTS:+-o $AUTOMOUNT_OPTS} $DEVICE $AUTOMOUNT_DIR
    then
        log "Device successfully mounted: $AUTOMOUNT_DIR"
        
        # Check if post mount script exists
        if [ -f "$POST_MOUNT" ]
        then
            # Run post mount script in background
            "${POST_MOUNT}" "$AUTOMOUNT_DIR" "$DEVBASE" &
            log "Running mount script in background"
        fi

        exit 0
    else
        log "Mount error: $?"
        rmdir "$AUTOMOUNT_DIR"
        exit 1
    fi
}

case "${ACTION}" in
    add)
        do_mount
        ;;
    remove)
        do_unmount
        ;;
    *)
        usage
        ;;
esac