#!/usr/bin/env bash
#$1 = <dev>

# Default options to use for mounting
AUTOMOUNT_OPTS='noatime'
# Default type to use for mounting
AUTOMOUNT_TYPE=''

# Runs after mounting
POST_MOUNT='/etc/post_mount/run.sh'

# Directory to look for type-specific settings
confdir=/etc/media-automount.d

# Directory to use as parent media dir for mountpoints
mediadir=/media

[[ $EUID != 0 ]] && {
    echo "This tool requires root permissions"
    exit 1
}
shopt -s nullglob

log() {
    echo "media-automount" "$*"
}

if ! [ "$1" ]
then
    log "missing arguments! a device name must be provided"
    exit 1
else
    dev=/dev/${1##*/}
fi

# Check if the device exists, if not but mounted, umount it
if ! [ -b $dev ]
then
    if grep /etc/mtab -qe "^$dev"
    then
        log "$dev device removed, umounting and cleaning /media"
        if umount "$dev"
        then
            exitcode=0
        else
            exitcode=$?
            log "Error umounting $dev errcode:$exitcode"
        fi
    else
        # prevent it from failing on nonexistent devices and degrading systemctl boot
        exitcode=0
		log "device doesn't exist anymore or is not a block device: $dev"
    fi

    # cleanup
    for dir in "$mediadir"/*
    do
        [ -d "$dir" ] && ! mountpoint -q "$dir" && rmdir "$dir"
    done
    exit $exitcode
fi

# Load additional info for the block device
eval $(blkid -po export $dev)

# Devices with unknown type will be ignored
if [ -z "$TYPE" ]
then
    log "$dev has no known filesystem type, ignoring mount request"
	exit 0
fi

# Don't attempt to mount zfs
if [ "$TYPE" == "zfs_member" ]
then
    log "$dev filesystem type is $TYPE, ignoring mount request"
	exit 0
fi

# Don't manage devices labelled EFI
if [ "$LABEL" == "EFI" ]
then
    log "$dev has label $LABEL, automount won't manage it"
    exit 0
fi

# Check /etc/fstab for an entry corresponding to the device
[ "$UUID" ] && fstab=$(grep /etc/fstab -e "^[^#]*${UUID/\-/\\\-}") || \
[ "$LABEL" ] && fstab=$(grep /etc/fstab -e "^[^#]*${LABEL/\-/\\\-}") || \
fstab=$(grep /etc/fstab -e "^[ \t]*$dev[ \t]")

# Don't manage devices that are already in fstab
if [ "$fstab" ]
then
    log "$dev already in /etc/fstab, automount won't manage it: ${fstab/[ \t][ \t]/ }"
    exit 0
fi

# directory name
AUTOMOUNT_DIR="${mediadir}/${LABEL:-${dev##*/}}.$TYPE"

# Load Filesystem-specific configuration for mounting
if [ -e "$confdir/$TYPE" ]
then
	source "$confdir/$TYPE"
fi

log "mounting device $dev in $AUTOMOUNT_DIR"
mkdir -p "$AUTOMOUNT_DIR"
if mount ${AUTOMOUNT_TYPE:+-t $AUTOMOUNT_TYPE} ${AUTOMOUNT_OPTS:+-o $AUTOMOUNT_OPTS} $dev $AUTOMOUNT_DIR
then
    log "Device successfully mounted: $AUTOMOUNT_DIR"
    
    # Check if mount script exists
    if [ -f "$POST_MOUNT" ]
    then
        # Run mount script in background
        "${POST_MOUNT}" "$AUTOMOUNT_DIR" "$dev" &
        log "Running mount script in background"
    fi

    exit 0
else
    log "Mount error: $?"
    rmdir "$AUTOMOUNT_DIR"
    exit 1
fi
